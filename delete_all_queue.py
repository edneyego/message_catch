from confluent_kafka.admin import AdminClient
import sys
import time

BOOTSTRAP_SERVERS = "localhost:9092"


def deletar_todos_os_topicos():
    admin = AdminClient({"bootstrap.servers": BOOTSTRAP_SERVERS})

    # Lista todos os t√≥picos
    md = admin.list_topics(timeout=10)
    topicos = list(md.topics.keys())

    if not topicos:
        print("‚ö†Ô∏è Nenhum t√≥pico encontrado no cluster.")
        return

    print(f"üìã T√≥picos encontrados: {topicos}")

    # Aten√ß√£o: por padr√£o o Kafka cria "__consumer_offsets" e outros internos
    topicos_para_deletar = [
        t for t in topicos if not t.startswith("__")
    ]

    if not topicos_para_deletar:
        print("‚ö†Ô∏è Nenhum t√≥pico de usu√°rio para deletar (apenas internos).")
        return

    print(f"üóëÔ∏è Deletando t√≥picos: {topicos_para_deletar}")

    fs = admin.delete_topics(topicos_para_deletar, operation_timeout=30)

    # Aguarda as futures terminarem
    for t, f in fs.items():
        try:
            f.result()  # vai levantar exce√ß√£o se falhar
            print(f"‚úÖ T√≥pico deletado: {t}")
        except Exception as e:
            print(f"‚ùå Falha ao deletar {t}: {e}")


if __name__ == "__main__":
    confirm = input(
        "‚ö†Ô∏è Isso vai DELETAR todos os t√≥picos do Kafka (exceto internos). Confirmar? (digite 'SIM'): "
    )
    if confirm.strip().upper() == "SIM":
        deletar_todos_os_topicos()
    else:
        print("‚ùé Opera√ß√£o cancelada.")
        sys.exit(0)
